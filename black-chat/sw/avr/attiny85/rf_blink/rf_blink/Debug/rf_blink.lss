
rf_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000329  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000161  00000000  00000000  0000051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d6  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b4  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002b7  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	59 d0       	rcall	.+178    	; 0xde <main>
  2c:	67 c0       	rjmp	.+206    	; 0xfc <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <tick>:
//#include "macros.h"
#include <avr/io.h>
#include <util/delay.h>

void tick(char ticks){
	while (ticks>0){
  30:	88 23       	and	r24, r24
  32:	41 f0       	breq	.+16     	; 0x44 <__SREG__+0x5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	e7 ec       	ldi	r30, 0xC7	; 199
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	f1 f7       	brne	.-4      	; 0x38 <tick+0x8>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <__SP_H__>
  3e:	00 00       	nop
		_delay_us(100);
		ticks--;
  40:	81 50       	subi	r24, 0x01	; 1
//#include "macros.h"
#include <avr/io.h>
#include <util/delay.h>

void tick(char ticks){
	while (ticks>0){
  42:	c1 f7       	brne	.-16     	; 0x34 <tick+0x4>
  44:	08 95       	ret

00000046 <pulse>:
		_delay_us(100);
		ticks--;
	}
}

void pulse(char ticks){
  46:	cf 93       	push	r28
  48:	c8 2f       	mov	r28, r24
	PORTB=0x3F;
  4a:	8f e3       	ldi	r24, 0x3F	; 63
  4c:	88 bb       	out	0x18, r24	; 24
	tick(ticks);
  4e:	8c 2f       	mov	r24, r28
  50:	ef df       	rcall	.-34     	; 0x30 <tick>
	PORTB=0;
  52:	18 ba       	out	0x18, r1	; 24
	tick(ticks);
  54:	8c 2f       	mov	r24, r28
  56:	ec df       	rcall	.-40     	; 0x30 <tick>
}
  58:	cf 91       	pop	r28
  5a:	08 95       	ret

0000005c <send_sync>:

void send_sync(){
  5c:	cf 93       	push	r28
  5e:	ca e0       	ldi	r28, 0x0A	; 10
	char i;
	for (i=0;i<10;i++){
		pulse(1);
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	f1 df       	rcall	.-30     	; 0x46 <pulse>
		pulse(2);
  64:	82 e0       	ldi	r24, 0x02	; 2
  66:	ef df       	rcall	.-34     	; 0x46 <pulse>
		pulse(3);
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	ed df       	rcall	.-38     	; 0x46 <pulse>
  6c:	c1 50       	subi	r28, 0x01	; 1
	tick(ticks);
}

void send_sync(){
	char i;
	for (i=0;i<10;i++){
  6e:	c1 f7       	brne	.-16     	; 0x60 <send_sync+0x4>
		pulse(1);
		pulse(2);
		pulse(3);
	}
	pulse(3);
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	e9 df       	rcall	.-46     	; 0x46 <pulse>
}
  74:	cf 91       	pop	r28
  76:	08 95       	ret

00000078 <send_lose>:

void send_lose(){
  78:	cf 93       	push	r28
  7a:	c5 e0       	ldi	r28, 0x05	; 5
	char i;
	for (i=0;i<5;i++){
		pulse(3);
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	e3 df       	rcall	.-58     	; 0x46 <pulse>
  80:	c1 50       	subi	r28, 0x01	; 1
	pulse(3);
}

void send_lose(){
	char i;
	for (i=0;i<5;i++){
  82:	e1 f7       	brne	.-8      	; 0x7c <send_lose+0x4>
		pulse(3);
	}
}
  84:	cf 91       	pop	r28
  86:	08 95       	ret

00000088 <sendByte>:

void sendByte(int val){
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	8c 01       	movw	r16, r24
  92:	c0 e0       	ldi	r28, 0x00	; 0
  94:	d0 e0       	ldi	r29, 0x00	; 0
	// TODO - make faster by only sending needed bytes
	char i;
	for (i=0;i<8;i++){
		if ((val>>i)&1){pulse(2);}
  96:	98 01       	movw	r18, r16
  98:	0c 2e       	mov	r0, r28
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <sendByte+0x18>
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <sendByte+0x14>
  a4:	20 ff       	sbrs	r18, 0
  a6:	03 c0       	rjmp	.+6      	; 0xae <sendByte+0x26>
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	cd df       	rcall	.-102    	; 0x46 <pulse>
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <sendByte+0x2a>
		else{pulse(1);}
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	ca df       	rcall	.-108    	; 0x46 <pulse>
  b2:	21 96       	adiw	r28, 0x01	; 1
}

void sendByte(int val){
	// TODO - make faster by only sending needed bytes
	char i;
	for (i=0;i<8;i++){
  b4:	c8 30       	cpi	r28, 0x08	; 8
  b6:	d1 05       	cpc	r29, r1
  b8:	71 f7       	brne	.-36     	; 0x96 <sendByte+0xe>
		if ((val>>i)&1){pulse(2);}
		else{pulse(1);}
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

000000c4 <send>:

void send(int val){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
	sendByte(val);  // regular
  ca:	de df       	rcall	.-68     	; 0x88 <sendByte>
	sendByte(~val); // inverted
  cc:	ce 01       	movw	r24, r28
  ce:	80 95       	com	r24
  d0:	90 95       	com	r25
  d2:	da df       	rcall	.-76     	; 0x88 <sendByte>
	pulse(3);
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	b7 df       	rcall	.-146    	; 0x46 <pulse>
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:

int main (void){
	
	DDRB = 0x3F;
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	87 bb       	out	0x17, r24	; 23
	int i;

	while(1) {
		send_sync();
		for (i=0;i<200;i++){
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
	
	DDRB = 0x3F;
	int i;

	while(1) {
		send_sync();
  e6:	ba df       	rcall	.-140    	; 0x5c <send_sync>
		for (i=0;i<200;i++){
  e8:	c0 2f       	mov	r28, r16
  ea:	d1 2f       	mov	r29, r17
			send(i);
  ec:	ce 01       	movw	r24, r28
  ee:	ea df       	rcall	.-44     	; 0xc4 <send>
	DDRB = 0x3F;
	int i;

	while(1) {
		send_sync();
		for (i=0;i<200;i++){
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	c8 3c       	cpi	r28, 0xC8	; 200
  f4:	d1 05       	cpc	r29, r1
  f6:	d1 f7       	brne	.-12     	; 0xec <main+0xe>
			send(i);
		}
		send_lose();
  f8:	bf df       	rcall	.-130    	; 0x78 <send_lose>
	}
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <main+0x8>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
